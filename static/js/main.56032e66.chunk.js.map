{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","date","Date","onChange","e","setState","searchFiled","target","value","Timer","console","log","state","countTime","getTime","x","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","clearInterval","document","getElementById","innerHTML","className","direction","this","type","placeholder","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"uMA+DeA,E,kDAzDb,aAAc,IAAD,8BACX,gBAFFC,KAAM,IAAIC,KACG,EAYbC,SAAS,SAACC,GAER,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAd1B,EAiBbC,MAAO,WAELC,QAAQC,IAAI,EAAKC,MAAMN,aACvB,IAAIO,EAAU,IAAIX,KAAK,EAAKU,MAAMN,aAAaQ,UAC3CC,EAAGC,aAAY,WACjB,IAAIC,GAAM,IAAIf,MAAOY,UACjBI,EAASL,EAAUI,EACnBE,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQF,KAAKC,MAAOH,EAAQ,MAAT,MACvBR,QAAQC,IAAIW,GACZ,IAAIC,EAAUH,KAAKC,MAAOH,EAAQ,KAAT,KACrBM,EAAUJ,KAAKC,MAAOH,EAAQ,IAAkB,KAEpD,EAAKb,SAAS,CAACc,KAAKA,EAAKG,MAAMA,EAAMC,QAAQA,EAAQC,QAAQA,IAC7Dd,QAAQC,IAAR,4CAAiDQ,EAAjD,gBAA6DG,EAA7D,iBAA2EC,EAA3E,mBAA6FC,EAA7F,YACIN,EAAW,IACbO,cAAcV,GACdW,SAASC,eAAe,QAAQC,UAAY,aAE5C,MAlCJ,EAAKhB,MAAM,CACTN,YAAY,GACZa,KAAM,EACNG,MAAO,EACPC,QAAS,EACTC,QAAS,GAPA,E,0CAuCb,WACE,OACE,sBAAKK,UAAU,YAAf,UACA,6BAAI,yBAASC,UAAY,QAArB,yCAAuDC,KAAK9B,UAC9D,mFACA,gEAAiC8B,KAAKnB,MAAMO,KAA5C,gBAAwDY,KAAKnB,MAAMU,MAAnE,iBAAiFS,KAAKnB,MAAMW,QAA5F,mBAA8GQ,KAAKnB,MAAMY,QAAzH,aACA,uBAAOK,UAAU,qBAAqBG,KAAK,OAAOC,YAAY,mCAAmC9B,SAAU4B,KAAK5B,WAChH,qCACA,wBAAQ0B,UAAU,4BAA4BG,KAAK,SAASE,QAASH,KAAKtB,MAA1E,2B,GAjDU0B,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,8BACI,cAAC,EAAD,MAIJpB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.56032e66.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport tachyons from \"tachyons\";\r\nimport \"./index.css\"\r\n\r\nclass App extends Component{\r\n  date= new Date()\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      searchFiled:\"\",\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0, \r\n      seconds: 0,\r\n    }\r\n  }\r\n  \r\n\r\n  onChange=(e)=>{\r\n    //console.log(e.target.value)\r\n    this.setState({searchFiled: e.target.value})\r\n  }\r\n\r\n  Timer =()=>{\r\n    //console.log(\"Hi\")\r\n    console.log(this.state.searchFiled)\r\n    var countTime=new Date(this.state.searchFiled).getTime()\r\n    var x= setInterval(()=>{\r\n      var now = new Date().getTime();\r\n      var distance=countTime-now;\r\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n      var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n      console.log(hours)\r\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n      //document.getElementById(\"timer\").innerHTML=`${hours}Hours ${minutes}Minutes ${seconds}Seconds`\r\n      this.setState({days:days,hours:hours,minutes:minutes,seconds:seconds})\r\n      console.log(`Timer Ends in this time period :- ${days}Days ${hours}Hours ${minutes}Minutes ${seconds}Seconds`)\r\n      if (distance < 0) {\r\n        clearInterval(x);\r\n        document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\r\n      }\r\n      },1000)\r\n\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"tc modify\">\r\n      <h1><marquee direction = \"right\">{`Current Time in INDIA ${this.date}`}</marquee></h1>\r\n        <h4>Please Enter the date on which the Timer Ends !!!</h4>\r\n        <h2>{`Remaining Time Period :- ${this.state.days}Days ${this.state.hours}Hours ${this.state.minutes}Minutes ${this.state.seconds}Seconds`}</h2>\r\n        <input className=\"pa2 bg-light-green\" type=\"date\" placeholder=\"Enter date in MM-DD-YEAR Formate\" onChange={this.onChange}/>\r\n        <span> </span>\r\n        <button className=\"pa2 bg-light-grey pointer\" type=\"submit\" onClick={this.Timer}>Submit</button>\r\n      </div>\r\n    )\r\n    \r\n  }\r\n\r\n  }\r\n\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\"\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <div>\r\n      <App/>\r\n  </div>\r\n  \r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}